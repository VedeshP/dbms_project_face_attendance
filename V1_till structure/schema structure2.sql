-- 1. Table for Schools
CREATE TABLE SCHOOL (
    SCHOOL_ID VARCHAR(10) PRIMARY KEY,
    SCHOOL_NAME VARCHAR(100) NOT NULL
);

-- 2. Table for Programs
CREATE TABLE PROGRAM (
    PROGRAM_ID VARCHAR(10) PRIMARY KEY,
    PROGRAM_NAME VARCHAR(150) NOT NULL,
    SCHOOL_ID VARCHAR(10) NOT NULL,
    PROGRAM_LEVEL ENUM('Undergraduate', 'Postgraduate', 'Doctoral') NOT NULL,
    FOREIGN KEY (SCHOOL_ID) REFERENCES SCHOOL(SCHOOL_ID) ON DELETE CASCADE
);

-- 3. Table for Departments
CREATE TABLE DEPARTMENT  (
    DEPT_CODE VARCHAR(10) PRIMARY KEY,
    DEPT_NAME VARCHAR(100) NOT NULL,
    SCHOOL_ID VARCHAR(10) NOT NULL,
    FOREIGN KEY (SCHOOL_ID) REFERENCES SCHOOL(SCHOOL_ID) ON DELETE CASCADE
);

-- 4. Modify STUDENT table to include SCHOOL, PROGRAM, and STUDENT TYPE
--isme pehle division ka table
CREATE TABLE STUDENT (
    ID VARCHAR(10) PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    CONTACT_NO VARCHAR(20),
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    DEPT_CODE VARCHAR(10) NOT NULL,
    SCHOOL_ID VARCHAR(10) NOT NULL,
    PROGRAM_ID VARCHAR(10) NOT NULL,
    DIVISION_ID VARCHAR(10) NOT NULL,  -- Added Division
    GROUP_ID VARCHAR(10) NOT NULL,     -- Added Group
    STUDENT_TYPE ENUM('Domestic', 'International') NOT NULL,
    IMAGE_PATH TEXT,
    CHECK (ID REGEXP '^[0-9]{2}[A-Z]{3}[0-9]{3}D?$'), -- changes made here - added three digit number check instead of two
    FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) ON DELETE CASCADE,
    FOREIGN KEY (SCHOOL_ID) REFERENCES SCHOOL(SCHOOL_ID) ON DELETE CASCADE,
    FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAM(PROGRAM_ID) ON DELETE CASCADE,
    FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION(DIVISION_ID) ON DELETE CASCADE,  -- New FK
    FOREIGN KEY (GROUP_ID) REFERENCES STUDENT_GROUP(GROUP_ID) ON DELETE CASCADE    -- New FK
);


-- 5. Modify PROFESSOR table (remains same)
CREATE TABLE PROFESSOR (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    DEPT_CODE VARCHAR(10) NOT NULL,
    FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) ON DELETE CASCADE
);

-- 6. Modify COURSE table to include PROGRAM_ID
CREATE TABLE COURSE (
    ID VARCHAR(10) PRIMARY KEY,
    COURSE_NAME VARCHAR(100) NOT NULL,
    DEPT_CODE VARCHAR(10) NOT NULL,
    PROGRAM_ID VARCHAR(10) NOT NULL,
    PROFESSOR_ID INT,
    FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) ON DELETE CASCADE,
    FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAM(PROGRAM_ID) ON DELETE CASCADE,
    FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR(ID) ON DELETE SET NULL
);

-- 7. Enrollment table for students in courses
CREATE TABLE ENROLLMENT (
    STUDENT_ID VARCHAR(10),
    COURSE_ID VARCHAR(10),
    DIVISION_ID VARCHAR(10) NOT NULL,  -- Added Division
    GROUP_ID VARCHAR(10) NOT NULL,     -- Added Group
    PRIMARY KEY (STUDENT_ID, COURSE_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID) ON DELETE CASCADE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID) ON DELETE CASCADE,
    FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION(DIVISION_ID) ON DELETE CASCADE,  -- New FK
    FOREIGN KEY (GROUP_ID) REFERENCES STUDENT_GROUP(GROUP_ID) ON DELETE CASCADE    -- New FK
);


-- 8. Attendance table to track student attendance
CREATE TABLE ATTENDANCE (
    STUDENT_ID VARCHAR(10),
    COURSE_ID VARCHAR(10),
    DATE DATE NOT NULL,
    STATUS ENUM('Present', 'Absent', 'Late') NOT NULL,
    PRIMARY KEY (STUDENT_ID, COURSE_ID, DATE),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID) ON DELETE CASCADE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID) ON DELETE CASCADE
);

-- 9. Division table to track student division.
CREATE TABLE DIVISION (
    DIVISION_ID VARCHAR(10) PRIMARY KEY,
    DIVISION_NAME VARCHAR(50) NOT NULL,
    PROGRAM_ID VARCHAR(10) NOT NULL,
    MAX_STUDENTS INT NOT NULL,
    FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAM(PROGRAM_ID) ON DELETE CASCADE
);

-- 10. group table to track student group.
CREATE TABLE STUDENT_GROUP (
    GROUP_ID VARCHAR(10) PRIMARY KEY,
    GROUP_NAME VARCHAR(50) NOT NULL,
    DIVISION_ID VARCHAR(10) NOT NULL,
    FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION(DIVISION_ID) ON DELETE CASCADE
);
